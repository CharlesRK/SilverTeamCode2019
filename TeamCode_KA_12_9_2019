package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.hardware.CRServo;
import com.qualcomm.robotcore.util.ElapsedTime;


@TeleOp(name = "Big Gay")
public class workingSilverCodeforOnce extends LinearOpMode{
    //Declarations
    private DcMotor leftFront, rightFront, leftBack, rightBack;
    private DcMotor intakeLeft, intakeRight;
    private DcMotor lift;

    //DECLARE CRSERVOS APART FROM 180 SERVOS

    private Servo foundationL, foundationR;
    private CRServo pusher, rackPinionL, rackPinionR, blockHolder;

    public void runOpMode(){
        //motorPow var
        double motorPow = 0.5;


        //Setting configuration
        leftFront = hardwareMap.dcMotor.get("fL");
        rightFront = hardwareMap.dcMotor.get("fR");
        leftBack = hardwareMap.dcMotor.get("bL");
        rightBack = hardwareMap.dcMotor.get("bR");

        intakeRight = hardwareMap.dcMotor.get("inL");
        intakeLeft = hardwareMap.dcMotor.get("inR");

        lift = hardwareMap.dcMotor.get("lift");

        foundationL = hardwareMap.get(Servo.class, "foundL");
        foundationR = hardwareMap.get(Servo.class, "foundR");

        rackPinionR = hardwareMap.get(CRServo.class, "outR");
        blockHolder = hardwareMap.get(CRServo.class, "hold");
        pusher = hardwareMap.get(CRServo.class, "pusher");

        //Setting direction
        intakeRight.setDirection(DcMotor.Direction.REVERSE);
        intakeLeft.setDirection(DcMotor.Direction.FORWARD);
        lift.setDirection(DcMotor.Direction.FORWARD);
        leftFront.setDirection(DcMotor.Direction.REVERSE);
        leftBack.setDirection(DcMotor.Direction.REVERSE);
        foundationL.setDirection(Servo.Direction.FORWARD);
        foundationR.setDirection(Servo.Direction.REVERSE);

        //Setting power to 0
        leftFront.setPower(0);
        rightFront.setPower(0);
        leftBack.setPower(0);
        rightBack.setPower(0);

        lift.setPower(0);
        //intakeLeft.setPower(0);
        //intakeRight.setPower(0);
        //rackPinionL.setPower(0);
        //rackPinionR.setPower(0);
        //nubGrabber.setPower(0);

        waitForStart();

        //TeleOp Controls
        while(!isStopRequested()){
            //MotorPow dpad
            if (gamepad1.dpad_up && motorPow < 1){
                motorPow += 0.1;
                telemetry.addData("motorPow var: ", motorPow);
                telemetry.update();
                try {
                    Thread.sleep(500);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            } else if (gamepad1.dpad_down && motorPow > 0.1){
                motorPow -= 0.1;
                telemetry.addData("motorPow var: ", motorPow);
                telemetry.update();
                try {
                    Thread.sleep(500);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }


            //TeleOp Drivetrain and Mecannum
            double speed = Math.hypot(gamepad1.left_stick_x, gamepad1.left_stick_y);
            double angle = Math.atan2(gamepad1.left_stick_y, -gamepad1.left_stick_x);
            double turn = gamepad1.right_stick_x;

            double lfPower = speed * Math.sin(angle + Math.PI / 4) - (turn * motorPow);
            double rfPower = speed * Math.sin(angle - Math.PI / 4) + (turn * motorPow);
            double lbPower = speed * Math.sin(angle - Math.PI / 4) - (turn * motorPow);
            double rbPower = speed * Math.sin(angle + Math.PI / 4) + (turn * motorPow);

            leftFront.setPower(lfPower * motorPow);
            rightFront.setPower(rfPower * motorPow);
            leftBack.setPower(lbPower * motorPow);
            rightBack.setPower(rbPower * motorPow);

            //TeleOp Intake
            if (gamepad2.left_bumper){
                intakeLeft.setPower(0.5);
                intakeRight.setPower(0.5);
            }
            else if (gamepad2.right_bumper){
                intakeLeft.setPower(-0.9);
                intakeRight.setPower(-0.9);
            } else {
                intakeLeft.setPower(0);
                intakeRight.setPower(0);
            }

            // TeleOp Lift
            if (gamepad2.left_stick_y > 0.1) {
                lift.setPower(gamepad2.left_stick_y);
            }
            else if (gamepad2.left_stick_y < -0.1) {
                lift.setPower(gamepad2.left_stick_y);
            } else {
                lift.setPower(0);
            }
            /*
            // rack and pinion servos
            if (gamepad1.right_trigger > 0.1){
                //rackPinionL.setPower(gamepad2.right_trigger);
                rackPinionR.setPower(gamepad2.right_trigger);
            } else if (gamepad1.left_trigger > 0.1){
                //rackPinionL.setPower(-gamepad2.left_trigger);
                rackPinionR.setPower(-gamepad2.left_trigger);
            }

             */

            //TeleOp Foundation ServorackPinionL
            if (gamepad2.left_trigger > 0.15){
                foundationL.setPosition(1);
                foundationR.setPosition(1);
            }
            if (gamepad2.right_trigger > 0.15){
                foundationL.setPosition(0);
                foundationR.setPosition(0);
            }
            /*
            //TeleOp Grabber Servo
            if (gamepad2.x){
                nubGrabber.setPower(1);
            }else if (gamepad2.y){
                nubGrabber.setPower(0);
            }
            */

            if (gamepad2.x){

                pusher.setPower(1);
            } else if (gamepad2.y){
                pusher.setPower(-1);
            } else {
                pusher.setPower(0);
            }
        }
    }
}
