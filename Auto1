package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.CRServo;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.util.ElapsedTime;


@Autonomous(name = "Epstein didn't kill himself, but it's auton", group = "Concept")
public class    Auto extends LinearOpMode {

    private DcMotor leftFront, rightFront, leftBack, rightBack;
    private DcMotor intakeLeft, intakeRight;
    private DcMotor lift;

    //DECLARE CRSERVOS APART FROM 180 SERVOS
    private Servo foundationL, foundationR,  blockHolder;
    private CRServo nubGrabber, rackPinionL, rackPinionR;





    @Override
    public void runOpMode() {

        leftFront = hardwareMap.dcMotor.get("leftFront");
        rightFront = hardwareMap.dcMotor.get("rightFront");
        leftBack = hardwareMap.dcMotor.get("leftBack");
        rightBack = hardwareMap.dcMotor.get("rightBack");

        intakeRight = hardwareMap.dcMotor.get("intakeLeft");
        intakeLeft = hardwareMap.dcMotor.get("intakeRight");

        lift = hardwareMap.dcMotor.get("lift");

        foundationL = hardwareMap.get(Servo.class, "foundationL");
        foundationR = hardwareMap.get(Servo.class, "foundationR");

        rackPinionL = hardwareMap.get(CRServo.class, "forward1");
        rackPinionR = hardwareMap.get(CRServo.class, "forward2");
        nubGrabber = hardwareMap.get(CRServo.class, "grabber");
        blockHolder = hardwareMap.get(Servo.class, "blockHolder");

        //Setting direction
        intakeRight.setDirection(DcMotor.Direction.REVERSE);
        intakeLeft.setDirection(DcMotor.Direction.FORWARD);
        lift.setDirection(DcMotor.Direction.REVERSE);
        leftFront.setDirection(DcMotor.Direction.REVERSE);
        leftBack.setDirection(DcMotor.Direction.REVERSE);
        foundationL.setDirection(Servo.Direction.FORWARD);
        foundationR.setDirection(Servo.Direction.REVERSE);

        //Setting power to 0
        leftFront.setPower(0);
        rightFront.setPower(0);
        leftBack.setPower(0);
        rightBack.setPower(0);
        lift.setPower(0);
        intakeLeft.setPower(0);
        intakeRight.setPower(0);
        rackPinionL.setPower(0);
        rackPinionR.setPower(0);
        nubGrabber.setPower(0);

        waitForStart();


        telemetry.addData("Status", "Initialized");
        telemetry.addData("Hello Driver", "Press Play Button");
        telemetry.update();
        //reset servos


        waitForStart();

        leftFront.setPower(0.5);
        rightFront.setPower(0.5);
        leftBack.setPower(0.5);
        rightBack.setPower(0.5);
        try {
            Thread.sleep(1000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        leftFront.setPower(-0.1);
        rightFront.setPower(-0.1);
        leftBack.setPower(-0.1);
        rightBack.setPower(-0.1);
        try {
            Thread.sleep(200);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        leftFront.setPower(0);
        rightFront.setPower(0);
        leftBack.setPower(0);
        rightBack.setPower(0);
        /*
        leftFront.setPower(-0.2);
        rightFront.setPower(0.2);
        leftBack.setPower(-0.2);
        rightBack.setPower(0.2);

        try {
            Thread.sleep(700);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        //ADD FOUNDATION GRABBING

        leftFront.setPower(0.2);
        rightFront.setPower(-0.2);
        leftBack.setPower(0.2);
        rightBack.setPower(-0.2);
        try {
            Thread.sleep(900);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }



        leftFront.setPower(-0.2);
        rightFront.setPower(-0.2);
        leftBack.setPower(-0.2);
        rightBack.setPower(-0.2);
        try {
            Thread.sleep(450);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

         */



        //FIRST NEED TO TURN
            /*
            frontLeft.setPower(0.5);
            backLeft.setPower(0.5);
            frontRight.setPower(0.5);
            backRight.setPower(0.5);
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
             */


        //MOVE
        /*
        frontLeft.setPower(-0.5);
        backLeft.setPower(-0.5);
        frontRight.setPower(0.5);
        backRight.setPower(0.5);

        //justWait(2000);

        try {
            Thread.sleep(870);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        frontLeft.setPower(0.0);
        backLeft.setPower(0.0);
        frontRight.setPower(0.0);
        backRight.setPower(0.0);
        */
    }

    /*

    public void foundation(double position) {
        // The motors are being set to a speed given within the parameters
        leftServo.setPosition(position);
        rightServo.setPosition(position);

    }
    public void justWait(int millisec){
        double currTime = getRuntime();
        double waitTime = currTime + (double) (millisec/1000);
        while (getRuntime() < waitTime){

        }
    }

    public void driveMethod( double rightSpeed, double leftSpeed, double driving_time) {
        // The motors are being set to a speed given within the parameters
        if (counter <= driving_time) {
            frontLeft.setPower(leftSpeed);
            backLeft.setPower(leftSpeed);
            frontRight.setPower(rightSpeed);
            backRight.setPower(rightSpeed);
            //Thread.sleep(1000);
        }




        // Resets the runtime to 0 so that when calculating speed, the previous time is not impacting the amount of time a call should
        // run for (double sec). If you are still confused about this ask Shreya.
        runtime.reset();

        // Runs the action only if the OpMode is still running and active and if the reset runtime is less than the variable, double sec.


        telemetry.addData("Path", "Leg 1: %2.5f S Elapsed", runtime.seconds());
        telemetry.update();
    }
    */

}
